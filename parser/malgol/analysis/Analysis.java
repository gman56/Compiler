/* This file was generated by SableCC (http://www.sablecc.org/). */

package malgol.analysis;

import malgol.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseASomeFunctionDefList(ASomeFunctionDefList node);
    void caseANoneFunctionDefList(ANoneFunctionDefList node);
    void caseAFunctionDef(AFunctionDef node);
    void caseASomeParamList(ASomeParamList node);
    void caseANoneParamList(ANoneParamList node);
    void caseASomeParamListTail(ASomeParamListTail node);
    void caseANoneParamListTail(ANoneParamListTail node);
    void caseABlockBlock(ABlockBlock node);
    void caseAPrintStmt(APrintStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseASelectStmt(ASelectStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseASkipStmt(ASkipStmt node);
    void caseAReturnStmt(AReturnStmt node);
    void caseASomeDeclsDeclsStmts(ASomeDeclsDeclsStmts node);
    void caseANoDeclsDeclsStmts(ANoDeclsDeclsStmts node);
    void caseADecl(ADecl node);
    void caseASomeStmtList(ASomeStmtList node);
    void caseANoneStmtList(ANoneStmtList node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseAArrayType(AArrayType node);
    void caseAOrExp(AOrExp node);
    void caseABaseExp(ABaseExp node);
    void caseAAndAndExp(AAndAndExp node);
    void caseABaseAndExp(ABaseAndExp node);
    void caseANotNotExp(ANotNotExp node);
    void caseABaseNotExp(ABaseNotExp node);
    void caseALtRelExp(ALtRelExp node);
    void caseAGtRelExp(AGtRelExp node);
    void caseAEqRelExp(AEqRelExp node);
    void caseANeqRelExp(ANeqRelExp node);
    void caseAGeqRelExp(AGeqRelExp node);
    void caseALeqRelExp(ALeqRelExp node);
    void caseAIntExpRelExp(AIntExpRelExp node);
    void caseAPlusIntExp(APlusIntExp node);
    void caseAMinusIntExp(AMinusIntExp node);
    void caseATermIntExp(ATermIntExp node);
    void caseAMultTerm(AMultTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAModTerm(AModTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAIntNegFactor(AIntNegFactor node);
    void caseAPrimeExpFactor(APrimeExpFactor node);
    void caseAIntPrimeExp(AIntPrimeExp node);
    void caseABoolPrimeExp(ABoolPrimeExp node);
    void caseAVarPrimeExp(AVarPrimeExp node);
    void caseAFunctionCallPrimeExp(AFunctionCallPrimeExp node);
    void caseAParenPrimeExp(AParenPrimeExp node);
    void caseAIdVarExp(AIdVarExp node);
    void caseAArrayVarExp(AArrayVarExp node);
    void caseASomeArgList(ASomeArgList node);
    void caseANoneArgList(ANoneArgList node);
    void caseASomeArgListTail(ASomeArgListTail node);
    void caseANoneArgListTail(ANoneArgListTail node);

    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTComma(TComma node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTGeq(TGeq node);
    void caseTLeq(TLeq node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTAmp(TAmp node);
    void caseTBar(TBar node);
    void caseTBang(TBang node);
    void caseTColonEquals(TColonEquals node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTArrayOf(TArrayOf node);
    void caseTColon(TColon node);
    void caseTPrint(TPrint node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTSkip(TSkip node);
    void caseTReturn(TReturn node);
    void caseTBoolean(TBoolean node);
    void caseTBlank(TBlank node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
