/* This file was generated by SableCC (http://www.sablecc.org/). */

package malgol.node;

import malgol.analysis.*;

@SuppressWarnings("nls")
public final class AArrayType extends PType
{
    private TArrayOf _arrayOf_;
    private TNumber _size_;
    private PType _elements_;

    public AArrayType()
    {
        // Constructor
    }

    public AArrayType(
        @SuppressWarnings("hiding") TArrayOf _arrayOf_,
        @SuppressWarnings("hiding") TNumber _size_,
        @SuppressWarnings("hiding") PType _elements_)
    {
        // Constructor
        setArrayOf(_arrayOf_);

        setSize(_size_);

        setElements(_elements_);

    }

    @Override
    public Object clone()
    {
        return new AArrayType(
            cloneNode(this._arrayOf_),
            cloneNode(this._size_),
            cloneNode(this._elements_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayType(this);
    }

    public TArrayOf getArrayOf()
    {
        return this._arrayOf_;
    }

    public void setArrayOf(TArrayOf node)
    {
        if(this._arrayOf_ != null)
        {
            this._arrayOf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayOf_ = node;
    }

    public TNumber getSize()
    {
        return this._size_;
    }

    public void setSize(TNumber node)
    {
        if(this._size_ != null)
        {
            this._size_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._size_ = node;
    }

    public PType getElements()
    {
        return this._elements_;
    }

    public void setElements(PType node)
    {
        if(this._elements_ != null)
        {
            this._elements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elements_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arrayOf_)
            + toString(this._size_)
            + toString(this._elements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arrayOf_ == child)
        {
            this._arrayOf_ = null;
            return;
        }

        if(this._size_ == child)
        {
            this._size_ = null;
            return;
        }

        if(this._elements_ == child)
        {
            this._elements_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arrayOf_ == oldChild)
        {
            setArrayOf((TArrayOf) newChild);
            return;
        }

        if(this._size_ == oldChild)
        {
            setSize((TNumber) newChild);
            return;
        }

        if(this._elements_ == oldChild)
        {
            setElements((PType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
