/* This file was generated by SableCC (http://www.sablecc.org/). */

package malgol.node;

import malgol.analysis.*;

@SuppressWarnings("nls")
public final class AIntNegFactor extends PFactor
{
    private TMinus _minus_;
    private PFactor _arg_;

    public AIntNegFactor()
    {
        // Constructor
    }

    public AIntNegFactor(
        @SuppressWarnings("hiding") TMinus _minus_,
        @SuppressWarnings("hiding") PFactor _arg_)
    {
        // Constructor
        setMinus(_minus_);

        setArg(_arg_);

    }

    @Override
    public Object clone()
    {
        return new AIntNegFactor(
            cloneNode(this._minus_),
            cloneNode(this._arg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIntNegFactor(this);
    }

    public TMinus getMinus()
    {
        return this._minus_;
    }

    public void setMinus(TMinus node)
    {
        if(this._minus_ != null)
        {
            this._minus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minus_ = node;
    }

    public PFactor getArg()
    {
        return this._arg_;
    }

    public void setArg(PFactor node)
    {
        if(this._arg_ != null)
        {
            this._arg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._minus_)
            + toString(this._arg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._minus_ == child)
        {
            this._minus_ = null;
            return;
        }

        if(this._arg_ == child)
        {
            this._arg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._minus_ == oldChild)
        {
            setMinus((TMinus) newChild);
            return;
        }

        if(this._arg_ == oldChild)
        {
            setArg((PFactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
