/* This file was generated by SableCC (http://www.sablecc.org/). */

package malgol.node;

import malgol.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private PFunctionDef _functionDef_;
    private PFunctionDefList _functionDefList_;

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") PFunctionDef _functionDef_,
        @SuppressWarnings("hiding") PFunctionDefList _functionDefList_)
    {
        // Constructor
        setFunctionDef(_functionDef_);

        setFunctionDefList(_functionDefList_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneNode(this._functionDef_),
            cloneNode(this._functionDefList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public PFunctionDef getFunctionDef()
    {
        return this._functionDef_;
    }

    public void setFunctionDef(PFunctionDef node)
    {
        if(this._functionDef_ != null)
        {
            this._functionDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionDef_ = node;
    }

    public PFunctionDefList getFunctionDefList()
    {
        return this._functionDefList_;
    }

    public void setFunctionDefList(PFunctionDefList node)
    {
        if(this._functionDefList_ != null)
        {
            this._functionDefList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionDefList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._functionDef_)
            + toString(this._functionDefList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._functionDef_ == child)
        {
            this._functionDef_ = null;
            return;
        }

        if(this._functionDefList_ == child)
        {
            this._functionDefList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._functionDef_ == oldChild)
        {
            setFunctionDef((PFunctionDef) newChild);
            return;
        }

        if(this._functionDefList_ == oldChild)
        {
            setFunctionDefList((PFunctionDefList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
