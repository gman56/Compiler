/* This file was generated by SableCC (http://www.sablecc.org/). */

package malgol.parser;

import malgol.lexer.*;
import malgol.node.*;
import malgol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASomeFunctionDefList */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ANoneFunctionDefList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AFunctionDef */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ASomeParamList */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce ANoneParamList */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ASomeParamListTail */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce ANoneParamListTail */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ABlockBlock */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce APrintStmt */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list, false);
            }
            break;
            case 10: /* reduce AAssignStmt */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce ABlockStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ASelectStmt */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AWhileStmt */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce ASkipStmt */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AReturnStmt */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ASomeDeclsDeclsStmts */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce ANoDeclsDeclsStmts */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce ADecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce ASomeStmtList */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce ANoneStmtList */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AIntType */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce ABoolType */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AArrayType */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce AOrExp */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce ABaseExp */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AAndAndExp */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce ABaseAndExp */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list, false);
            }
            break;
            case 28: /* reduce ANotNotExp */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ABaseNotExp */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce ALtRelExp */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AGtRelExp */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AEqRelExp */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce ANeqRelExp */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AGeqRelExp */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce ALeqRelExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AIntExpRelExp */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, false);
            }
            break;
            case 37: /* reduce APlusIntExp */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AMinusIntExp */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce ATermIntExp */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce ADivTerm */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce AModTerm */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list, false);
            }
            break;
            case 44: /* reduce AIntNegFactor */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce APrimeExpFactor */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
            case 46: /* reduce AIntPrimeExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce ABoolPrimeExp */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce AVarPrimeExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce AFunctionCallPrimeExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list, false);
            }
            break;
            case 50: /* reduce AParenPrimeExp */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list, false);
            }
            break;
            case 51: /* reduce AIdVarExp */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, false);
            }
            break;
            case 52: /* reduce AArrayVarExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce ASomeArgList */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce ANoneArgList */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce ASomeArgListTail */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list, false);
            }
            break;
            case 56: /* reduce ANoneArgListTail */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunctionDef pfunctiondefNode2;
        PFunctionDefList pfunctiondeflistNode3;
        pfunctiondefNode2 = (PFunctionDef)nodeArrayList1.get(0);
        pfunctiondeflistNode3 = (PFunctionDefList)nodeArrayList2.get(0);

        pprogramNode1 = new AProgram(pfunctiondefNode2, pfunctiondeflistNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASomeFunctionDefList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefList pfunctiondeflistNode1;
        {
            // Block
        PFunctionDef pfunctiondefNode2;
        PFunctionDefList pfunctiondeflistNode3;
        pfunctiondefNode2 = (PFunctionDef)nodeArrayList1.get(0);
        pfunctiondeflistNode3 = (PFunctionDefList)nodeArrayList2.get(0);

        pfunctiondeflistNode1 = new ASomeFunctionDefList(pfunctiondefNode2, pfunctiondeflistNode3);
        }
	nodeList.add(pfunctiondeflistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ANoneFunctionDefList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFunctionDefList pfunctiondeflistNode1;
        {
            // Block

        pfunctiondeflistNode1 = new ANoneFunctionDefList();
        }
	nodeList.add(pfunctiondeflistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFunctionDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDef pfunctiondefNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PParamList pparamlistNode4;
        TRPar trparNode5;
        TColon tcolonNode6;
        PType ptypeNode7;
        PBlock pblockNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pparamlistNode4 = (PParamList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        ptypeNode7 = (PType)nodeArrayList6.get(0);
        pblockNode8 = (PBlock)nodeArrayList7.get(0);

        pfunctiondefNode1 = new AFunctionDef(tidNode2, tlparNode3, pparamlistNode4, trparNode5, tcolonNode6, ptypeNode7, pblockNode8);
        }
	nodeList.add(pfunctiondefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASomeParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        PDecl pdeclNode2;
        PParamListTail pparamlisttailNode3;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);
        pparamlisttailNode3 = (PParamListTail)nodeArrayList2.get(0);

        pparamlistNode1 = new ASomeParamList(pdeclNode2, pparamlisttailNode3);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ANoneParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParamList pparamlistNode1;
        {
            // Block

        pparamlistNode1 = new ANoneParamList();
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASomeParamListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamListTail pparamlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PDecl pdeclNode3;
        PParamListTail pparamlisttailNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pdeclNode3 = (PDecl)nodeArrayList2.get(0);
        pparamlisttailNode4 = (PParamListTail)nodeArrayList3.get(0);

        pparamlisttailNode1 = new ASomeParamListTail(tcommaNode2, pdeclNode3, pparamlisttailNode4);
        }
	nodeList.add(pparamlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ANoneParamListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParamListTail pparamlisttailNode1;
        {
            // Block

        pparamlisttailNode1 = new ANoneParamListTail();
        }
	nodeList.add(pparamlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ABlockBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PDeclsStmts pdeclsstmtsNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pdeclsstmtsNode3 = (PDeclsStmts)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlockBlock(tlbraceNode2, pdeclsstmtsNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APrintStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TPrint tprintNode2;
        PExp pexpNode3;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pstmtNode1 = new APrintStmt(tprintNode2, pexpNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PVarExp pvarexpNode2;
        TColonEquals tcolonequalsNode3;
        PExp pexpNode4;
        pvarexpNode2 = (PVarExp)nodeArrayList1.get(0);
        tcolonequalsNode3 = (TColonEquals)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new AAssignStmt(pvarexpNode2, tcolonequalsNode3, pexpNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PDeclsStmts pdeclsstmtsNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pdeclsstmtsNode3 = (PDeclsStmts)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pstmtNode1 = new ABlockStmt(tlbraceNode2, pdeclsstmtsNode3, trbraceNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASelectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExp pexpNode3;
        TThen tthenNode4;
        PStmt pstmtNode5;
        TElse telseNode6;
        PStmt pstmtNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pstmtNode7 = (PStmt)nodeArrayList6.get(0);

        pstmtNode1 = new ASelectStmt(tifNode2, pexpNode3, tthenNode4, pstmtNode5, telseNode6, pstmtNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PExp pexpNode3;
        TDo tdoNode4;
        PStmt pstmtNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, pexpNode3, tdoNode4, pstmtNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASkipStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSkip tskipNode2;
        tskipNode2 = (TSkip)nodeArrayList1.get(0);

        pstmtNode1 = new ASkipStmt(tskipNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pstmtNode1 = new AReturnStmt(treturnNode2, pexpNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASomeDeclsDeclsStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclsStmts pdeclsstmtsNode1;
        {
            // Block
        PDecl pdeclNode2;
        PDeclsStmts pdeclsstmtsNode3;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);
        pdeclsstmtsNode3 = (PDeclsStmts)nodeArrayList2.get(0);

        pdeclsstmtsNode1 = new ASomeDeclsDeclsStmts(pdeclNode2, pdeclsstmtsNode3);
        }
	nodeList.add(pdeclsstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ANoDeclsDeclsStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclsStmts pdeclsstmtsNode1;
        {
            // Block
        PStmtList pstmtlistNode2;
        pstmtlistNode2 = (PStmtList)nodeArrayList1.get(0);

        pdeclsstmtsNode1 = new ANoDeclsDeclsStmts(pstmtlistNode2);
        }
	nodeList.add(pdeclsstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pdeclNode1 = new ADecl(tidNode2, tcolonNode3, ptypeNode4);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASomeStmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtList pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        PStmtList pstmtlistNode3;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtlistNode3 = (PStmtList)nodeArrayList2.get(0);

        pstmtlistNode1 = new ASomeStmtList(pstmtNode2, pstmtlistNode3);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANoneStmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmtList pstmtlistNode1;
        {
            // Block

        pstmtlistNode1 = new ANoneStmtList();
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AArrayType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TArrayOf tarrayofNode2;
        TNumber tnumberNode3;
        PType ptypeNode4;
        tarrayofNode2 = (TArrayOf)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        ptypeNode1 = new AArrayType(tarrayofNode2, tnumberNode3, ptypeNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TBar tbarNode3;
        PAndExp pandexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tbarNode3 = (TBar)nodeArrayList2.get(0);
        pandexpNode4 = (PAndExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, tbarNode3, pandexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ABaseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PAndExp pandexpNode2;
        pandexpNode2 = (PAndExp)nodeArrayList1.get(0);

        pexpNode1 = new ABaseExp(pandexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAndAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExp pandexpNode1;
        {
            // Block
        PAndExp pandexpNode2;
        TAmp tampNode3;
        PNotExp pnotexpNode4;
        pandexpNode2 = (PAndExp)nodeArrayList1.get(0);
        tampNode3 = (TAmp)nodeArrayList2.get(0);
        pnotexpNode4 = (PNotExp)nodeArrayList3.get(0);

        pandexpNode1 = new AAndAndExp(pandexpNode2, tampNode3, pnotexpNode4);
        }
	nodeList.add(pandexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABaseAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExp pandexpNode1;
        {
            // Block
        PNotExp pnotexpNode2;
        pnotexpNode2 = (PNotExp)nodeArrayList1.get(0);

        pandexpNode1 = new ABaseAndExp(pnotexpNode2);
        }
	nodeList.add(pandexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANotNotExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNotExp pnotexpNode1;
        {
            // Block
        TBang tbangNode2;
        PNotExp pnotexpNode3;
        tbangNode2 = (TBang)nodeArrayList1.get(0);
        pnotexpNode3 = (PNotExp)nodeArrayList2.get(0);

        pnotexpNode1 = new ANotNotExp(tbangNode2, pnotexpNode3);
        }
	nodeList.add(pnotexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ABaseNotExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNotExp pnotexpNode1;
        {
            // Block
        PRelExp prelexpNode2;
        prelexpNode2 = (PRelExp)nodeArrayList1.get(0);

        pnotexpNode1 = new ABaseNotExp(prelexpNode2);
        }
	nodeList.add(pnotexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALtRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TLt tltNode3;
        PIntExp pintexpNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        pintexpNode4 = (PIntExp)nodeArrayList3.get(0);

        prelexpNode1 = new ALtRelExp(pintexpNode2, tltNode3, pintexpNode4);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AGtRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TGt tgtNode3;
        PIntExp pintexpNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        pintexpNode4 = (PIntExp)nodeArrayList3.get(0);

        prelexpNode1 = new AGtRelExp(pintexpNode2, tgtNode3, pintexpNode4);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AEqRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TEq teqNode3;
        PIntExp pintexpNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pintexpNode4 = (PIntExp)nodeArrayList3.get(0);

        prelexpNode1 = new AEqRelExp(pintexpNode2, teqNode3, pintexpNode4);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANeqRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TNeq tneqNode3;
        PIntExp pintexpNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        pintexpNode4 = (PIntExp)nodeArrayList3.get(0);

        prelexpNode1 = new ANeqRelExp(pintexpNode2, tneqNode3, pintexpNode4);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AGeqRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TGeq tgeqNode3;
        PIntExp pintexpNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        tgeqNode3 = (TGeq)nodeArrayList2.get(0);
        pintexpNode4 = (PIntExp)nodeArrayList3.get(0);

        prelexpNode1 = new AGeqRelExp(pintexpNode2, tgeqNode3, pintexpNode4);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ALeqRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TLeq tleqNode3;
        PIntExp pintexpNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        tleqNode3 = (TLeq)nodeArrayList2.get(0);
        pintexpNode4 = (PIntExp)nodeArrayList3.get(0);

        prelexpNode1 = new ALeqRelExp(pintexpNode2, tleqNode3, pintexpNode4);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIntExpRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);

        prelexpNode1 = new AIntExpRelExp(pintexpNode2);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce APlusIntExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntExp pintexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pintexpNode1 = new APlusIntExp(pintexpNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pintexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMinusIntExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntExp pintexpNode1;
        {
            // Block
        PIntExp pintexpNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pintexpNode2 = (PIntExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pintexpNode1 = new AMinusIntExp(pintexpNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pintexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATermIntExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntExp pintexpNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pintexpNode1 = new ATermIntExp(ptermNode2);
        }
	nodeList.add(pintexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDiv tdivNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tdivNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMod tmodNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AModTerm(ptermNode2, tmodNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AIntNegFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TMinus tminusNode2;
        PFactor pfactorNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new AIntNegFactor(tminusNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce APrimeExpFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PPrimeExp pprimeexpNode2;
        pprimeexpNode2 = (PPrimeExp)nodeArrayList1.get(0);

        pfactorNode1 = new APrimeExpFactor(pprimeexpNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AIntPrimeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimeExp pprimeexpNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pprimeexpNode1 = new AIntPrimeExp(tnumberNode2);
        }
	nodeList.add(pprimeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ABoolPrimeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimeExp pprimeexpNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        pprimeexpNode1 = new ABoolPrimeExp(tbooleanNode2);
        }
	nodeList.add(pprimeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AVarPrimeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimeExp pprimeexpNode1;
        {
            // Block
        PVarExp pvarexpNode2;
        pvarexpNode2 = (PVarExp)nodeArrayList1.get(0);

        pprimeexpNode1 = new AVarPrimeExp(pvarexpNode2);
        }
	nodeList.add(pprimeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AFunctionCallPrimeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimeExp pprimeexpNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgList parglistNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArgList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pprimeexpNode1 = new AFunctionCallPrimeExp(tidNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pprimeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AParenPrimeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimeExp pprimeexpNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pprimeexpNode1 = new AParenPrimeExp(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(pprimeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AIdVarExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarExp pvarexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarexpNode1 = new AIdVarExp(tidNode2);
        }
	nodeList.add(pvarexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AArrayVarExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarExp pvarexpNode1;
        {
            // Block
        PVarExp pvarexpNode2;
        TLBracket tlbracketNode3;
        PExp pexpNode4;
        TRBracket trbracketNode5;
        pvarexpNode2 = (PVarExp)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        pvarexpNode1 = new AArrayVarExp(pvarexpNode2, tlbracketNode3, pexpNode4, trbracketNode5);
        }
	nodeList.add(pvarexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASomeArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        PExp pexpNode2;
        PArgListTail parglisttailNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        parglisttailNode3 = (PArgListTail)nodeArrayList2.get(0);

        parglistNode1 = new ASomeArgList(pexpNode2, parglisttailNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANoneArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PArgList parglistNode1;
        {
            // Block

        parglistNode1 = new ANoneArgList();
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASomeArgListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgListTail parglisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExp pexpNode3;
        PArgListTail parglisttailNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        parglisttailNode4 = (PArgListTail)nodeArrayList3.get(0);

        parglisttailNode1 = new ASomeArgListTail(tcommaNode2, pexpNode3, parglisttailNode4);
        }
	nodeList.add(parglisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANoneArgListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PArgListTail parglisttailNode1;
        {
            // Block

        parglisttailNode1 = new ANoneArgListTail();
        }
	nodeList.add(parglisttailNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {36, SHIFT, 1}, },
			{{-1, ERROR, 1}, {0, SHIFT, 4}, },
			{{-1, ERROR, 2}, {37, ACCEPT, -1}, },
			{{-1, REDUCE, 2}, {36, SHIFT, 1}, },
			{{-1, REDUCE, 5}, {36, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, {36, SHIFT, 1}, },
			{{-1, ERROR, 7}, {25, SHIFT, 11}, },
			{{-1, ERROR, 8}, {1, SHIFT, 12}, },
			{{-1, REDUCE, 7}, {11, SHIFT, 13}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 11}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, },
			{{-1, ERROR, 12}, {25, SHIFT, 19}, },
			{{-1, ERROR, 13}, {36, SHIFT, 7}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 17}, {35, SHIFT, 21}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 19}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, },
			{{-1, REDUCE, 7}, {11, SHIFT, 13}, },
			{{-1, ERROR, 21}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, },
			{{-1, ERROR, 22}, {2, SHIFT, 25}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, {30, SHIFT, 30}, {32, SHIFT, 31}, {33, SHIFT, 32}, {36, SHIFT, 33}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, {30, SHIFT, 30}, {32, SHIFT, 31}, {33, SHIFT, 32}, {36, SHIFT, 33}, },
			{{-1, ERROR, 28}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 29}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 30}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 32}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, REDUCE, 51}, {25, SHIFT, 11}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, {30, SHIFT, 30}, {32, SHIFT, 31}, {33, SHIFT, 32}, {36, SHIFT, 58}, },
			{{-1, ERROR, 35}, {3, SHIFT, 60}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, {30, SHIFT, 30}, {32, SHIFT, 31}, {33, SHIFT, 32}, {36, SHIFT, 33}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 38}, {4, SHIFT, 62}, {21, SHIFT, 63}, },
			{{-1, ERROR, 39}, {3, SHIFT, 64}, },
			{{-1, ERROR, 40}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 41}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 42}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 68}, },
			{{-1, REDUCE, 9}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 25}, {18, SHIFT, 70}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 36}, {6, SHIFT, 71}, {7, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {15, SHIFT, 76}, {16, SHIFT, 77}, {17, SHIFT, 78}, },
			{{-1, REDUCE, 39}, {8, SHIFT, 79}, {9, SHIFT, 80}, {10, SHIFT, 81}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 48}, {4, SHIFT, 62}, },
			{{-1, ERROR, 55}, {19, SHIFT, 69}, {28, SHIFT, 82}, },
			{{-1, ERROR, 56}, {19, SHIFT, 69}, {31, SHIFT, 83}, },
			{{-1, REDUCE, 15}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 62}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 63}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 65}, {1, SHIFT, 86}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 54}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 69}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 70}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 71}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 72}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 73}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 74}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 75}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 76}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 77}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 78}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 79}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 80}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 81}, {0, SHIFT, 40}, {7, SHIFT, 41}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, ERROR, 82}, {2, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, {30, SHIFT, 30}, {32, SHIFT, 31}, {33, SHIFT, 32}, {36, SHIFT, 58}, },
			{{-1, ERROR, 83}, {2, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, {30, SHIFT, 30}, {32, SHIFT, 31}, {33, SHIFT, 32}, {36, SHIFT, 58}, },
			{{-1, ERROR, 84}, {5, SHIFT, 104}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 10}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 56}, {11, SHIFT, 105}, {19, SHIFT, 69}, },
			{{-1, ERROR, 88}, {1, SHIFT, 107}, },
			{{-1, REDUCE, 24}, {18, SHIFT, 70}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 37}, {8, SHIFT, 79}, {9, SHIFT, 80}, {10, SHIFT, 81}, },
			{{-1, REDUCE, 38}, {8, SHIFT, 79}, {9, SHIFT, 80}, {10, SHIFT, 81}, },
			{{-1, REDUCE, 30}, {6, SHIFT, 71}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 31}, {6, SHIFT, 71}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 34}, {6, SHIFT, 71}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 35}, {6, SHIFT, 71}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 32}, {6, SHIFT, 71}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 33}, {6, SHIFT, 71}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 102}, {29, SHIFT, 108}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 105}, {0, SHIFT, 40}, {7, SHIFT, 41}, {20, SHIFT, 42}, {34, SHIFT, 43}, {35, SHIFT, 44}, {36, SHIFT, 45}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 108}, {2, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, {30, SHIFT, 30}, {32, SHIFT, 31}, {33, SHIFT, 32}, {36, SHIFT, 58}, },
			{{-1, REDUCE, 56}, {11, SHIFT, 105}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 55}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, {6, 10}, },
			{{-1, 6}, {0, 3}, },
			{{-1, 8}, },
			{{-1, 14}, {20, 23}, },
			{{-1, 26}, },
			{{-1, 34}, {82, 102}, {83, 103}, {108, 110}, },
			{{-1, 35}, {27, 39}, {36, 61}, },
			{{-1, 36}, {4, 9}, {13, 20}, },
			{{-1, 37}, {34, 59}, },
			{{-1, 18}, {19, 22}, {21, 24}, },
			{{-1, 46}, {29, 55}, {30, 56}, {32, 57}, {40, 65}, {62, 84}, {63, 85}, {68, 87}, {105, 109}, },
			{{-1, 47}, {69, 89}, },
			{{-1, 48}, {42, 67}, {70, 90}, },
			{{-1, 49}, },
			{{-1, 50}, {73, 93}, {74, 94}, {75, 95}, {76, 96}, {77, 97}, {78, 98}, },
			{{-1, 51}, {71, 91}, {72, 92}, },
			{{-1, 52}, {41, 66}, {79, 99}, {80, 100}, {81, 101}, },
			{{-1, 53}, },
			{{-1, 54}, {25, 38}, {27, 38}, {34, 38}, {36, 38}, {82, 38}, {83, 38}, {108, 38}, },
			{{-1, 88}, },
			{{-1, 106}, {109, 111}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: id",
			"expecting: '('",
			"expecting: EOF",
			"expecting: id, EOF",
			"expecting: ')', id",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'int', 'bool', 'arrayof'",
			"expecting: ')', '{', '}', ',', 'print', 'if', 'while', 'skip', 'return', id",
			"expecting: number",
			"expecting: '{'",
			"expecting: '{', '}', 'print', 'if', 'while', 'skip', 'return', id",
			"expecting: '(', '-', '!', boolean, number, id",
			"expecting: '{', '}', 'print', 'if', 'else', 'while', 'skip', 'return', id",
			"expecting: '[', ':=', ':'",
			"expecting: '}'",
			"expecting: '[', ':='",
			"expecting: '(', '-', boolean, number, id",
			"expecting: ')', '{', '}', ']', '+', '-', '*', '/', '%', ',', '<', '>', '>=', '<=', '=', '!=', '&', '|', 'print', 'if', 'then', 'else', 'while', 'do', 'skip', 'return', id",
			"expecting: '(', ')', '{', '}', '[', ']', '+', '-', '*', '/', '%', ',', '<', '>', '>=', '<=', '=', '!=', '&', '|', 'print', 'if', 'then', 'else', 'while', 'do', 'skip', 'return', id",
			"expecting: '{', '}', '|', 'print', 'if', 'else', 'while', 'skip', 'return', id",
			"expecting: ')', '{', '}', ']', ',', '&', '|', 'print', 'if', 'then', 'else', 'while', 'do', 'skip', 'return', id",
			"expecting: ')', '{', '}', ']', '+', '-', ',', '<', '>', '>=', '<=', '=', '!=', '&', '|', 'print', 'if', 'then', 'else', 'while', 'do', 'skip', 'return', id",
			"expecting: ')', '{', '}', '[', ']', '+', '-', '*', '/', '%', ',', '<', '>', '>=', '<=', '=', '!=', '&', '|', 'print', 'if', 'then', 'else', 'while', 'do', 'skip', 'return', id",
			"expecting: '|', 'then'",
			"expecting: '|', 'do'",
			"expecting: ')', '|'",
			"expecting: '(', ')', '-', '!', boolean, number, id",
			"expecting: '{', 'print', 'if', 'while', 'skip', 'return', id",
			"expecting: ']', '|'",
			"expecting: ')', ',', '|'",
			"expecting: ')', '{', '}', ']', '+', '-', ',', '&', '|', 'print', 'if', 'then', 'else', 'while', 'do', 'skip', 'return', id",
			"expecting: 'else'",
			"expecting: ')', '{', '}', '[', ']', '+', '-', '*', '/', '%', ',', '<', '>', '>=', '<=', '=', '!=', '&', '|', ':=', 'print', 'if', 'then', 'else', 'while', 'do', 'skip', 'return', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 3, 5, 6, 7, 2, 8, 5, 0, 6, 9, 9, 10, 9, 8, 7, 8, 11, 6, 9, 12, 3, 12, 13, 13, 13, 14, 13, 15, 12, 16, 12, 16, 17, 16, 13, 18, 13, 19, 19, 20, 21, 22, 22, 22, 23, 19, 19, 19, 24, 25, 26, 21, 17, 16, 3, 16, 13, 13, 14, 27, 19, 22, 28, 13, 13, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 29, 29, 30, 21, 19, 31, 6, 22, 22, 19, 19, 32, 32, 32, 32, 32, 32, 19, 19, 19, 33, 14, 34, 13, 6, 19, 29, 31, 14, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
